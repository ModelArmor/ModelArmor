#!/bin/bash
# #############################################################################
# Helpful stand-alone script to run multi-domain example simple_app
# #############################################################################
#
set -Eeuo pipefail

export GOPATH=$HOME

pushd "$(dirname "$0")" > /dev/null 2>&1

cd ../..
CERTIFIER_PROTOTYPE="$(pwd)"; export CERTIFIER_PROTOTYPE

popd

export MULTIDOMAIN_EXAMPLE_DIR=$CERTIFIER_PROTOTYPE/sample_apps/multidomain_simple_app

NumCPUs=1
if [ "$(uname -s)" = "Linux" ]; then
    NumCPUs=$(grep -c "^processor" /proc/cpuinfo)
fi
# Cap # of -j threads for make to 8
NumMakeThreads=${NumCPUs}
if [ "${NumMakeThreads}" -gt 8 ]; then NumMakeThreads=8; fi

# Compile utilities
cd $CERTIFIER_PROTOTYPE/utilities
make -j "${NumMakeThreads}" -f cert_utility.mak
make -j "${NumMakeThreads}" -f policy_utilities.mak

# Create keys
mkdir -p $MULTIDOMAIN_EXAMPLE_DIR/provisioning

set -x

# ---------------------------------------------------------------------------
# Implemented in gen_policy_and_self_signed_cert()
# ---------------------------------------------------------------------------
cd $MULTIDOMAIN_EXAMPLE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/cert_utility.exe \
    --operation=generate-policy-key-and-test-keys \
	--policy_key_name=client-policy-key \
	--policy_key_output_file=client_policy_key_file.bin \
	--policy_cert_output_file=client_policy_cert_file.bin \
	--platform_key_output_file=platform_key_file.bin \
	--attest_key_output_file=attest_key_file.bin

$CERTIFIER_PROTOTYPE/utilities/cert_utility.exe \
    --operation=generate-policy-key-and-test-keys \
	--policy_key_name=server-policy-key \
	--policy_key_output_file=server_policy_key_file.bin \
	--policy_cert_output_file=server_policy_cert_file.bin \
	--platform_key_output_file=platform_key_file.bin \
	--attest_key_output_file=attest_key_file.bin

# ---------------------------------------------------------------------------
# Implemented in gen_policy_key_for_example_app()
# ---------------------------------------------------------------------------
# embed policy key and compile app
cd $MULTIDOMAIN_EXAMPLE_DIR/provisioning
$CERTIFIER_PROTOTYPE/utilities/embed_policy_key.exe \
	--input=client_policy_cert_file.bin \
	--output=../client_policy_key.cc

$CERTIFIER_PROTOTYPE/utilities/embed_policy_key.exe \
	--input=server_policy_cert_file.bin \
	--output=../server_policy_key.cc

# make app and compute app measurement
cd $MULTIDOMAIN_EXAMPLE_DIR
make -j "${NumMakeThreads}" -f multidomain_app.mak

# build policy
cd $MULTIDOMAIN_EXAMPLE_DIR/provisioning

# ---------------------------------------------------------------------------
# policyKey says platformKey is-trusted-for-attestation

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe \
	--key_subject=platform_key_file.bin \
	--verb="is-trusted-for-attestation" \
    --output=ts1.bin

# server_vse_policy1a.bin is server-policy-key says platform-key is-trusted-for-attestation
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe \
	--key_subject=server_policy_key_file.bin \
	--verb="says" \
    --clause=ts1.bin \
    --output=server_vse_policy1a.bin

# client_vse_policy1b.bin is client-policy-key says platform-key is-trusted-for-attestation
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe \
	--key_subject=client_policy_key_file.bin \
	--verb="says" \
    --clause=ts1.bin \
    --output=client_vse_policy1b.bin

# Up to here done in construct_policyKey_platform_is_trusted_multidomain_simple_app()

# ---------------------------------------------------------------------------
# Implemented in produce_signed_claims_for_vse_policy_statement_multidomain_simple_app()
# ---------------------------------------------------------------------------
#
$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
	--vse_file=server_vse_policy1a.bin \
	--duration=9000 \
    --private_key_file=server_policy_key_file.bin \
	--output=server_signed_claim_1a.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
	--vse_file=client_vse_policy1b.bin \
    --duration=9000 \
	--private_key_file=client_policy_key_file.bin \
	--output=client_signed_claim_1b.bin

# ---------------------------------------------------------------------------
# Implemented in get_measurement_of_app_by_name()
# ---------------------------------------------------------------------------
# policy key says measurement is-trusted
$CERTIFIER_PROTOTYPE/utilities/measurement_utility.exe --type=hash \
	--input=../multidomain_client_app.exe \
	--output=multidomain_client_app.measurement

$CERTIFIER_PROTOTYPE/utilities/measurement_utility.exe --type=hash \
	--input=../multidomain_server_app.exe \
	--output=multidomain_server_app.measurement

# ---------------------------------------------------------------------------
# Implemented in construct_policyKey_measurement_is_trusted_multidomain_simple_app()
# ---------------------------------------------------------------------------

# Above two measurements generated in get_measurement_of_app_by_name()

# ts2a is server-measurement is-trusted
$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe \
    --key_subject="" \
	--measurement_subject=multidomain_server_app.measurement \
	--verb="is-trusted" \
    --output=ts2a-md-server.bin

# vse_policy2a is server-policy-key says server_measurement is-trusted
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe \
	--key_subject=server_policy_key_file.bin \
	--verb="says" \
    --clause=ts2a-md-server.bin \
    --output=server_vse_policy2a.bin

# ts2b is client-measurement is-trusted
$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe \
    --key_subject="" \
	--measurement_subject=multidomain_client_app.measurement \
	--verb="is-trusted" \
    --output=ts2b-md-client.bin

# vse_policy2b is server-policy-key says client_measurement is-trusted
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe \
	--key_subject=server_policy_key_file.bin \
	--verb="says" \
    --clause=ts2b-md-client.bin \
    --output=server_vse_policy2b.bin

# vse_policy2c is client-policy-key says server_measurement is-trusted
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe \
	--key_subject=client_policy_key_file.bin \
	--verb="says" \
    --clause=ts2a-md-server.bin \
    --output=client_vse_policy2c.bin

# vse_policy2d is client-policy-key says client_measurement is-trusted
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe \
	--key_subject=client_policy_key_file.bin \
	--verb="says" \
    --clause=ts2b-md-client.bin \
    --output=client_vse_policy2d.bin

#-- End of construct_policyKey_measurement_is_trusted_multidomain_simple_app()

# ---------------------------------------------------------------------------
# Implemented in produce_signed_claims_for_vse_policy_statement_multidomain_simple_app()
# ---------------------------------------------------------------------------

# Both measurements are trusted in both domains

# server-policy-key signs vse_policy2a and policy2b
$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
	--vse_file=server_vse_policy2a.bin \
    --duration=9000 \
	--private_key_file=server_policy_key_file.bin \
	--output=server_signed_claim_2a.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
	--vse_file=server_vse_policy2b.bin \
    --duration=9000 \
	--private_key_file=server_policy_key_file.bin \
	--output=server_signed_claim_2b.bin

# client-policy-key signs vse_policy2c and policy2d
$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
	--vse_file=client_vse_policy2c.bin \
    --duration=9000 \
	--private_key_file=client_policy_key_file.bin \
	--output=client_signed_claim_2c.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
	--vse_file=client_vse_policy2d.bin \
    --duration=9000 \
	--private_key_file=client_policy_key_file.bin \
	--output=client_signed_claim_2d.bin

# ---------------------------------------------------------------------------
# Implemented in combine_policy_stmts_multidomain_simple_app()
# ---------------------------------------------------------------------------

$CERTIFIER_PROTOTYPE/utilities/package_claims.exe \
	--input=server_signed_claim_1a.bin,server_signed_claim_2a.bin,server_signed_claim_2b.bin \
	--output=server_policy.bin

$CERTIFIER_PROTOTYPE/utilities/package_claims.exe \
	--input=client_signed_claim_1b.bin,client_signed_claim_2c.bin,client_signed_claim_2d.bin \
	--output=client_policy.bin

# ---------------------------------------------------------------------------
# Implemented in print_policy()
# ---------------------------------------------------------------------------
$CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=server_policy.bin
$CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=client_policy.bin

# ---------------------------------------------------------------------------
# Implemented in construct_platform_key_attestation_stmt_sign_it()
# ---------------------------------------------------------------------------
# This gets included from the app
$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe \
	--key_subject=attest_key_file.bin \
	--verb="is-trusted-for-attestation" \
    --output=tsc1.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe \
	--key_subject=platform_key_file.bin \
	--verb="says" \
    --clause=tsc1.bin \
    --output=vse_policy3.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
	--vse_file=vse_policy3.bin --duration=9000 \
	--private_key_file=platform_key_file.bin \
	--output=platform_attest_endorsement.bin

# Implemented in print_signed_claim()
$CERTIFIER_PROTOTYPE/utilities/print_signed_claim.exe \
	--input=platform_attest_endorsement.bin

# Implemented in mkdirs_for_test()
# provision service and apps
cd $MULTIDOMAIN_EXAMPLE_DIR

mkdir -p app1_data app2_data
mkdir -p client_service
mkdir -p server_service

# ---------------------------------------------------------------------------
# Implemented in provision_app_service_files()
# ---------------------------------------------------------------------------
# provision service and apps
cd $MULTIDOMAIN_EXAMPLE_DIR/provisioning

cp -p ./* $MULTIDOMAIN_EXAMPLE_DIR/client_service
cp -p ./* $MULTIDOMAIN_EXAMPLE_DIR/server_service
cp -p ./* $MULTIDOMAIN_EXAMPLE_DIR/app1_data
cp -p ./* $MULTIDOMAIN_EXAMPLE_DIR/app2_data

# ---------------------------------------------------------------------------
# Implemented in build_simple_server()
# ---------------------------------------------------------------------------
# compile the server
cd $CERTIFIER_PROTOTYPE/certifier_service/oelib
make dummy

cd $CERTIFIER_PROTOTYPE/certifier_service/graminelib
make dummy

cd $CERTIFIER_PROTOTYPE/certifier_service/isletlib
make dummy

cd $CERTIFIER_PROTOTYPE/certifier_service/teelib
make

cd $CERTIFIER_PROTOTYPE/certifier_service
go build simpleserver.go

# ---------------------------------------------------------------------------
# Implemented in start_certifier_service_multidomain_simple_app()
# ---------------------------------------------------------------------------
# run certifier server for server policy in one window
cd $MULTIDOMAIN_EXAMPLE_DIR/server_service

$CERTIFIER_PROTOTYPE/certifier_service/simpleserver \
    --port=8121 \
	--policyFile=server_policy.bin \
    --policy_key_file=server_policy_key_file.bin \
	--policy_cert_file=server_policy_cert_file.bin \
    --readPolicy=true &

sleep 5

# run certifier server for client policy in another window
cd $MULTIDOMAIN_EXAMPLE_DIR/client_service

$CERTIFIER_PROTOTYPE/certifier_service/simpleserver \
    --port=8122 \
	--policyFile=client_policy.bin \
    --policy_key_file=client_policy_key_file.bin \
	--policy_cert_file=client_policy_cert_file.bin \
    --readPolicy=true &

sleep 5

# ---------------------------------------------------------------------------
# Implemented in run_multidomain_simple_app_as_server_talk_to_Cert_Service()
# ---------------------------------------------------------------------------
# initialize server app
cd $MULTIDOMAIN_EXAMPLE_DIR

$MULTIDOMAIN_EXAMPLE_DIR/multidomain_server_app.exe \
	--operation=cold-init \
    --data_dir=./app2_data/ \
	--measurement_file="multidomain_server_app.measurement" \
	--policy_store_file=policy_store \
    --policy_port=8121 \
    --print_all=true

# get server app certified
cd $MULTIDOMAIN_EXAMPLE_DIR

$MULTIDOMAIN_EXAMPLE_DIR/multidomain_server_app.exe \
	--operation=get-certified \
    --data_dir=./app2_data/ \
	--measurement_file="multidomain_server_app.measurement" \
	--policy_store_file=policy_store \
    --policy_port=8121 \
    --print_all=true

# ---------------------------------------------------------------------------
# Implemented in run_multidomain_simple_app_as_client_talk_to_Cert_Service()
# ---------------------------------------------------------------------------
# initialize client app
cd $MULTIDOMAIN_EXAMPLE_DIR

$MULTIDOMAIN_EXAMPLE_DIR/multidomain_client_app.exe \
	--operation=cold-init \
    --data_dir=./app1_data/ \
	--measurement_file="multidomain_client_app.measurement" \
	--policy_store_file=policy_store \
	--primary_policy_port=8122 \
    --secondary_policy_port=8121 \
    --print_all=true

# get client app certified
cd $MULTIDOMAIN_EXAMPLE_DIR

$MULTIDOMAIN_EXAMPLE_DIR/multidomain_client_app.exe \
	--operation=get-certified \
    --data_dir=./app1_data/ \
	--measurement_file="multidomain_client_app.measurement" \
	--policy_store_file=policy_store \
	--primary_policy_port=8122 \
    --secondary_policy_port=8121 \
    --secondary_cert_file=server_policy_cert_file.bin \
    --print_all=true

# ---------------------------------------------------------------------------
# Implemented in run_app_by_name_as_server_offers_trusted_service()
# ---------------------------------------------------------------------------
# run the app
cd $MULTIDOMAIN_EXAMPLE_DIR

$MULTIDOMAIN_EXAMPLE_DIR/multidomain_server_app.exe \
	--operation=run-app-as-server \
	--data_dir=./app2_data/ \
	--policy_store_file=policy_store \
	--measurement_file="multidomain_server_app.measurement" \
    --print_all=true &

sleep 10

# ---------------------------------------------------------------------------
# Implemented in run_app_by_name_as_client_offers_trusted_service()
# ---------------------------------------------------------------------------
cd $MULTIDOMAIN_EXAMPLE_DIR

$MULTIDOMAIN_EXAMPLE_DIR/multidomain_client_app.exe \
	--operation=run-app-as-client \
	--data_dir=./app1_data/ \
	--policy_store_file=policy_store \
	--measurement_file="multidomain_client_app.measurement" \
    --print_all=true
